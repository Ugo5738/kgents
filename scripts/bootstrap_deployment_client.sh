#!/bin/bash

# ==============================================================================
# Kgents - Bootstrap Deployment Service Client
#
# This script automates the one-time setup for the agent_deployment_service's
# machine-to-machine (M2M) credentials. It is idempotent and safe to run multiple times.
#
# What it does:
# 1. Logs in as the admin user to get an admin JWT.
# 2. Checks if an App Client for the deployment service already exists.
# 3. If not, it creates the App Client and assigns it the 'agent_runtime_client' role.
# 4. It then automatically finds and updates the .env.dev file for the
#    agent_deployment_service with the correct CLIENT_ID and CLIENT_SECRET.
#
# Prerequisites:
#   - auth_service must be running.
#   - `jq` must be installed (`brew install jq`).
# ==============================================================================

set -e # Exit immediately on error

# --- Configuration ---
AUTH_SERVICE_URL="http://localhost:8001/api/v1"
ADMIN_EMAIL="admin@admin.com"
ADMIN_PASSWORD="admin"
CLIENT_NAME="agent-deployment-service-client"
ENV_FILE_PATH="./agent_deployment_service/.env.dev"

# --- Helper Functions ---
info() {
  echo -e "\033[34m[INFO] $1\033[0m"
}

success() {
  echo -e "\033[32m✅ [SUCCESS] $1\033[0m"
}

warn() {
  echo -e "\033[33m⚠️ [WARNING] $1\033[0m"
}

error() {
  echo -e "\033[31m❌ [ERROR] $1\033[0m" >&2
  exit 1
}

# --- Prerequisite Check ---
if ! command -v jq &> /dev/null; then
  error "'jq' is not installed. Please install it to parse JSON responses."
fi
if [ ! -f "$ENV_FILE_PATH" ]; then
    error "Environment file not found at $ENV_FILE_PATH. Are you in the project root?"
fi

# --- Step 1: Get Admin Token ---
info "Authenticating as admin user '$ADMIN_EMAIL'..."
LOGIN_RESPONSE=$(curl -s -X POST "$AUTH_SERVICE_URL/auth/users/login" \
  -H "Content-Type: application/json" \
  -d "{\"email\": \"$ADMIN_EMAIL\", \"password\": \"$ADMIN_PASSWORD\"}")

if ! echo "$LOGIN_RESPONSE" | jq -e '.access_token' > /dev/null; then
  error "Admin login failed. Is auth_service running? Response: $LOGIN_RESPONSE"
fi
ADMIN_TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.access_token')
success "Admin authentication successful."

# --- Step 2: Check if Client Already Exists ---
info "Checking for existing App Client named '$CLIENT_NAME'..."
CLIENTS_RESPONSE=$(curl -s -X GET "$AUTH_SERVICE_URL/admin/clients" -H "Authorization: Bearer $ADMIN_TOKEN")
EXISTING_CLIENT=$(echo "$CLIENTS_RESPONSE" | jq -r --arg CLIENT_NAME "$CLIENT_NAME" '.clients[] | select(.client_name == $CLIENT_NAME)')

if [ -n "$EXISTING_CLIENT" ]; then
    CLIENT_ID=$(echo "$EXISTING_CLIENT" | jq -r '.client_id')
    warn "App Client '$CLIENT_NAME' already exists with ID: $CLIENT_ID."
    info "Skipping creation. If you need to regenerate the secret, delete the client first via API."
    # We don't have the secret, so we can't update the .env file. The user must do it manually if they lost it.
    echo -e "\033[33mNote: The client secret cannot be retrieved. If you have lost it, you must manually delete this client and re-run this script.\033[0m"
    exit 0
fi

# --- Step 3: Create the App Client ---
success "Client '$CLIENT_NAME' not found. Creating it now..."
CREATE_RESPONSE=$(curl -s -X POST "$AUTH_SERVICE_URL/admin/clients" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $ADMIN_TOKEN" \
  -d '{
        "client_name": "'"$CLIENT_NAME"'",
        "description": "M2M client for the agent deployment service. Auto-generated by bootstrap script.",
        "allowed_callback_urls": [],
        "assigned_roles": ["agent_runtime_client"]
      }')

if ! echo "$CREATE_RESPONSE" | jq -e '.client_id' > /dev/null; then
  error "Failed to create App Client. Response: $CREATE_RESPONSE"
fi

CLIENT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.client_id')
CLIENT_SECRET=$(echo "$CREATE_RESPONSE" | jq -r '.client_secret')
success "Successfully created App Client '$CLIENT_NAME' with ID: $CLIENT_ID"

# --- Step 4: Automatically Update .env.dev File ---
info "Automatically updating environment file at '$ENV_FILE_PATH'..."

# Use sed to find and replace the placeholder values.
# This works on both macOS (with -i '') and Linux.
sed -i '' "s|AGENT_DEPLOYMENT_SERVICE_CLIENT_ID=.*|AGENT_DEPLOYMENT_SERVICE_CLIENT_ID=\"$CLIENT_ID\"|" "$ENV_FILE_PATH"
sed -i '' "s|AGENT_DEPLOYMENT_SERVICE_CLIENT_SECRET=.*|AGENT_DEPLOYMENT_SERVICE_CLIENT_SECRET=\"$CLIENT_SECRET\"|" "$ENV_FILE_PATH"

success "Environment file has been updated with the new credentials."

echo
echo "🎉 Bootstrap complete! Please restart the services for the changes to take effect:"
echo "   docker-compose up -d --build agent_deployment_service"