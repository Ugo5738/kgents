"""
Bootstrap module for Agent Deployment Service.
Handles initial setup of M2M credentials with the auth service.
"""

import asyncio
import os
from pathlib import Path
from typing import Optional, Tuple

import httpx
from dotenv import load_dotenv, set_key

from .logging_config import logger

# Configuration
AUTH_SERVICE_URL = os.getenv("AUTH_SERVICE_URL", "http://auth_service:8000/api/v1")
ADMIN_EMAIL = os.getenv("INITIAL_ADMIN_EMAIL", "admin@admin.com")
ADMIN_PASSWORD = os.getenv("INITIAL_ADMIN_PASSWORD", "admin")
CLIENT_NAME = "agent-deployment-service-client"
CLIENT_DESCRIPTION = (
    "M2M client for the agent deployment service. Auto-generated by bootstrap."
)
CLIENT_ROLES = ["agent_runtime_client"]


async def get_admin_token() -> Optional[str]:
    """Authenticate as admin and get an access token."""
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"{AUTH_SERVICE_URL}/auth/users/login",
                json={"email": ADMIN_EMAIL, "password": ADMIN_PASSWORD},
                timeout=10.0,
            )
            if response.status_code == 200:
                data = response.json()
                return data.get("access_token")
            else:
                logger.error(f"Admin login failed with status {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"Failed to authenticate as admin: {e}")
            return None


async def check_existing_client(admin_token: str) -> Optional[str]:
    """Check if our M2M client already exists."""
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{AUTH_SERVICE_URL}/admin/clients",
                headers={"Authorization": f"Bearer {admin_token}"},
                timeout=10.0,
            )
            if response.status_code == 200:
                data = response.json()
                for client_info in data.get("clients", []):
                    if client_info.get("client_name") == CLIENT_NAME:
                        logger.info(
                            f"Found existing client: {client_info.get('client_id')}"
                        )
                        return client_info.get("client_id")
            return None
        except Exception as e:
            logger.error(f"Failed to check existing clients: {e}")
            return None


async def create_m2m_client(admin_token: str) -> Optional[Tuple[str, str]]:
    """Create a new M2M client and return (client_id, client_secret)."""
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"{AUTH_SERVICE_URL}/admin/clients",
                headers={
                    "Authorization": f"Bearer {admin_token}",
                    "Content-Type": "application/json",
                },
                json={
                    "client_name": CLIENT_NAME,
                    "description": CLIENT_DESCRIPTION,
                    "allowed_callback_urls": [],
                    "assigned_roles": CLIENT_ROLES,
                },
                timeout=10.0,
            )
            if response.status_code == 200:
                data = response.json()
                client_id = data.get("client_id")
                client_secret = data.get("client_secret")
                if client_id and client_secret:
                    logger.info(f"Successfully created M2M client: {client_id}")
                    return client_id, client_secret
            else:
                logger.error(f"Failed to create client. Status: {response.status_code}")
            return None
        except Exception as e:
            logger.error(f"Failed to create M2M client: {e}")
            return None


def update_env_file(client_id: str, client_secret: str) -> bool:
    """Update the .env.dev file with the M2M credentials."""
    env_file_path = Path("/app/.env.dev")

    # If we're in a container, use /app path
    if not env_file_path.exists():
        # Try local development path
        service_dir = Path(__file__).parent.parent.parent
        env_file_path = service_dir / ".env.dev"

    if not env_file_path.exists():
        logger.warning(f"Environment file not found at {env_file_path}")
        # Still set the environment variables for the current process
        os.environ["AGENT_DEPLOYMENT_SERVICE_CLIENT_ID"] = client_id
        os.environ["AGENT_DEPLOYMENT_SERVICE_CLIENT_SECRET"] = client_secret
        return False

    try:
        # Update the .env.dev file
        set_key(str(env_file_path), "AGENT_DEPLOYMENT_SERVICE_CLIENT_ID", client_id)
        set_key(
            str(env_file_path), "AGENT_DEPLOYMENT_SERVICE_CLIENT_SECRET", client_secret
        )

        # Also update current environment
        os.environ["AGENT_DEPLOYMENT_SERVICE_CLIENT_ID"] = client_id
        os.environ["AGENT_DEPLOYMENT_SERVICE_CLIENT_SECRET"] = client_secret

        logger.info(f"Updated environment file with M2M credentials: {env_file_path}")
        return True
    except Exception as e:
        logger.error(f"Failed to update environment file: {e}")
        # Still set the environment variables for the current process
        os.environ["AGENT_DEPLOYMENT_SERVICE_CLIENT_ID"] = client_id
        os.environ["AGENT_DEPLOYMENT_SERVICE_CLIENT_SECRET"] = client_secret
        return False


async def wait_for_auth_service(max_retries: int = 30, delay: int = 2) -> bool:
    """Wait for auth service to be ready."""
    async with httpx.AsyncClient() as client:
        for i in range(max_retries):
            try:
                response = await client.get(f"{AUTH_SERVICE_URL}/health", timeout=5.0)
                if response.status_code == 200:
                    logger.info("Auth service is ready")
                    return True
            except Exception:
                pass

            if i < max_retries - 1:
                logger.info(f"Waiting for auth service... ({i+1}/{max_retries})")
                await asyncio.sleep(delay)

    logger.error("Auth service did not become ready in time")
    return False


async def run_bootstrap() -> bool:
    """
    Main bootstrap function for Agent Deployment Service.
    Sets up M2M credentials with the auth service.
    """
    logger.info("Starting Agent Deployment Service bootstrap process")

    # Check if we already have credentials configured
    client_id = os.getenv("AGENT_DEPLOYMENT_SERVICE_CLIENT_ID")
    client_secret = os.getenv("AGENT_DEPLOYMENT_SERVICE_CLIENT_SECRET")

    if client_id and client_secret:
        if client_id != "your_client_id_here":
            logger.info("M2M credentials already configured. Skipping bootstrap.")
            return True

    # Wait for auth service to be ready
    logger.info("Waiting for auth service to be available...")
    if not await wait_for_auth_service():
        logger.warning("Auth service not available. Proceeding without M2M setup.")
        # Don't fail - the service can still run, just without M2M auth
        return True

    # Get admin token
    logger.info("Authenticating as admin to set up M2M credentials...")
    admin_token = await get_admin_token()
    if not admin_token:
        logger.warning("Could not authenticate as admin. Proceeding without M2M setup.")
        # Don't fail - maybe auth service isn't fully configured yet
        return True

    # Check if client already exists
    existing_client_id = await check_existing_client(admin_token)
    if existing_client_id:
        logger.warning(
            f"M2M client '{CLIENT_NAME}' already exists with ID: {existing_client_id}. "
            "Cannot retrieve the secret. If you need to regenerate, delete the client manually."
        )
        # This is still considered successful - the client exists
        return True

    # Create new M2M client
    logger.info("Creating new M2M client...")
    client_credentials = await create_m2m_client(admin_token)
    if not client_credentials:
        logger.warning(
            "Could not create M2M client. Service will run without M2M auth."
        )
        # Don't fail - service can still run
        return True

    client_id, client_secret = client_credentials

    # Update environment file
    if update_env_file(client_id, client_secret):
        logger.info("Successfully configured M2M credentials")
    else:
        logger.warning("Could not update .env file, but credentials are set in memory")

    logger.info("Agent Deployment Service bootstrap completed successfully")
    return True


# Entry point for CLI
if __name__ == "__main__":
    asyncio.run(run_bootstrap())
