# Use explicit amd64 platform for Cloud Run compatibility
FROM --platform=linux/amd64 python:3.12-alpine

# Create working directory
WORKDIR /app

# Copy the flow configuration
COPY flow.json /app/flow.json

# Create a simple server script using echo
RUN echo '#!/usr/bin/env python3' > /app/server.py && \
    echo 'import http.server' >> /app/server.py && \
    echo 'import socketserver' >> /app/server.py && \
    echo 'import json' >> /app/server.py && \
    echo 'import os' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo 'class Handler(http.server.SimpleHTTPRequestHandler):' >> /app/server.py && \
    echo '    def do_GET(self):' >> /app/server.py && \
    echo '        if self.path == "/health":' >> /app/server.py && \
    echo '            self.send_response(200)' >> /app/server.py && \
    echo '            self.send_header("Content-type", "application/json")' >> /app/server.py && \
    echo '            self.end_headers()' >> /app/server.py && \
    echo '            response = {"status": "healthy", "service": "agent-runtime"}' >> /app/server.py && \
    echo '            self.wfile.write(json.dumps(response).encode())' >> /app/server.py && \
    echo '        else:' >> /app/server.py && \
    echo '            self.send_response(200)' >> /app/server.py && \
    echo '            self.send_header("Content-type", "application/json")' >> /app/server.py && \
    echo '            self.end_headers()' >> /app/server.py && \
    echo '            response = {' >> /app/server.py && \
    echo '                "message": "Agent Runtime Server",' >> /app/server.py && \
    echo '                "port": os.environ.get("PORT", "8080"),' >> /app/server.py && \
    echo '                "flow_exists": os.path.exists("/app/flow.json")' >> /app/server.py && \
    echo '            }' >> /app/server.py && \
    echo '            self.wfile.write(json.dumps(response).encode())' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo 'if __name__ == "__main__":' >> /app/server.py && \
    echo '    port = int(os.environ.get("PORT", 8080))' >> /app/server.py && \
    echo '    print(f"Server starting on 0.0.0.0:{port}")' >> /app/server.py && \
    echo '    with socketserver.TCPServer(("0.0.0.0", port), Handler) as httpd:' >> /app/server.py && \
    echo '        print(f"Server listening on 0.0.0.0:{port}")' >> /app/server.py && \
    echo '        httpd.serve_forever()' >> /app/server.py

# Expose the port
EXPOSE 8080

# Start the server
CMD ["python", "/app/server.py"]
